/* automatically generated by rust-bindgen 0.68.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct IHOLD_IRUN_t {
    pub __bindgen_anon_1: IHOLD_IRUN_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union IHOLD_IRUN_t__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub __bindgen_anon_1: IHOLD_IRUN_t__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct IHOLD_IRUN_t__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
impl IHOLD_IRUN_t__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn ihold(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_ihold(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn irun(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_irun(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn iholddelay(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_iholddelay(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        ihold: u8,
        irun: u8,
        iholddelay: u8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 5u8, {
            let ihold: u8 = unsafe { ::core::mem::transmute(ihold) };
            ihold as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let irun: u8 = unsafe { ::core::mem::transmute(irun) };
            irun as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let iholddelay: u8 = unsafe { ::core::mem::transmute(iholddelay) };
            iholddelay as u64
        });
        __bindgen_bitfield_unit
    }
}
impl IHOLD_IRUN_t__bindgen_ty_1 {
    #[inline]
    pub fn sr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_sr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(sr: u32) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let sr: u32 = unsafe { ::core::mem::transmute(sr) };
            sr as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const IHOLD_IRUN_t_address: u8 = 16;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TPOWERDOWN_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
pub const TPOWERDOWN_t_address: u8 = 17;
impl TPOWERDOWN_t {
    #[inline]
    pub fn sr(&self) -> u8 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u8) }
    }
    #[inline]
    pub fn set_sr(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(sr: u8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let sr: u8 = unsafe { ::core::mem::transmute(sr) };
            sr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct TPWMTHRS_t {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
pub const TPWMTHRS_t_address: u8 = 19;
impl TPWMTHRS_t {
    #[inline]
    pub fn sr(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_sr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(sr: u32) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 20u8, {
            let sr: u32 = unsafe { ::core::mem::transmute(sr) };
            sr as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
pub struct TMCStepper__bindgen_vtable(::core::ffi::c_void);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TMCStepper {
    pub vtable_: *const TMCStepper__bindgen_vtable,
    pub IHOLD_IRUN_register: IHOLD_IRUN_t,
    pub TPOWERDOWN_register: TPOWERDOWN_t,
    pub TPWMTHRS_register: TPWMTHRS_t,
    pub Rsense: f32,
    pub holdMultiplier: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TMCStepper_TSTEP_t {
    pub _address: u8,
}
pub const TMCStepper_TSTEP_t_address: u8 = 18;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TMCStepper_MSCNT_t {
    pub _address: u8,
}
pub const TMCStepper_MSCNT_t_address: u8 = 106;
pub const TMCStepper_TMC_READ: u8 = 0;
pub const TMCStepper_TMC_WRITE: u8 = 128;
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper6cs2rmsEh"]
    pub fn TMCStepper_cs2rms(this: *mut TMCStepper, CS: u8) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper11rms_currentEt"]
    pub fn TMCStepper_rms_current(this: *mut TMCStepper, mA: u16);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper11rms_currentEtf"]
    pub fn TMCStepper_rms_current1(this: *mut TMCStepper, mA: u16, mult: f32);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper11rms_currentEv"]
    pub fn TMCStepper_rms_current2(this: *mut TMCStepper) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper15test_connectionEv"]
    pub fn TMCStepper_test_connection(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10microstepsEt"]
    pub fn TMCStepper_microsteps(this: *mut TMCStepper, ms: u16);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10microstepsEv"]
    pub fn TMCStepper_microsteps1(this: *mut TMCStepper) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10blank_timeEh"]
    pub fn TMCStepper_blank_time(this: *mut TMCStepper, value: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10blank_timeEv"]
    pub fn TMCStepper_blank_time1(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper14hysteresis_endEa"]
    pub fn TMCStepper_hysteresis_end(this: *mut TMCStepper, value: i8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper14hysteresis_endEv"]
    pub fn TMCStepper_hysteresis_end1(this: *mut TMCStepper) -> i8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper16hysteresis_startEh"]
    pub fn TMCStepper_hysteresis_start(this: *mut TMCStepper, value: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper16hysteresis_startEv"]
    pub fn TMCStepper_hysteresis_start1(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5GSTATEh"]
    pub fn TMCStepper_GSTAT(this: *mut TMCStepper, input: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5GSTATEv"]
    pub fn TMCStepper_GSTAT1(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5resetEv"]
    pub fn TMCStepper_reset(this: *mut TMCStepper) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper7drv_errEv"]
    pub fn TMCStepper_drv_err(this: *mut TMCStepper) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5uv_cpEv"]
    pub fn TMCStepper_uv_cp(this: *mut TMCStepper) -> bool;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10IHOLD_IRUNEj"]
    pub fn TMCStepper_IHOLD_IRUN(this: *mut TMCStepper, input: u32);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10IHOLD_IRUNEv"]
    pub fn TMCStepper_IHOLD_IRUN1(this: *mut TMCStepper) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5iholdEh"]
    pub fn TMCStepper_ihold(this: *mut TMCStepper, B: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper4irunEh"]
    pub fn TMCStepper_irun(this: *mut TMCStepper, B: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10iholddelayEh"]
    pub fn TMCStepper_iholddelay(this: *mut TMCStepper, B: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5iholdEv"]
    pub fn TMCStepper_ihold1(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper4irunEv"]
    pub fn TMCStepper_irun1(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10iholddelayEv"]
    pub fn TMCStepper_iholddelay1(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10TPOWERDOWNEv"]
    pub fn TMCStepper_TPOWERDOWN(this: *mut TMCStepper) -> u8;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper10TPOWERDOWNEh"]
    pub fn TMCStepper_TPOWERDOWN1(this: *mut TMCStepper, input: u8);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5TSTEPEv"]
    pub fn TMCStepper_TSTEP(this: *mut TMCStepper) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper8TPWMTHRSEv"]
    pub fn TMCStepper_TPWMTHRS(this: *mut TMCStepper) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper8TPWMTHRSEj"]
    pub fn TMCStepper_TPWMTHRS1(this: *mut TMCStepper, input: u32);
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5MSCNTEv"]
    pub fn TMCStepper_MSCNT(this: *mut TMCStepper) -> u16;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper8MSCURACTEv"]
    pub fn TMCStepper_MSCURACT(this: *mut TMCStepper) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5cur_aEv"]
    pub fn TMCStepper_cur_a(this: *mut TMCStepper) -> i16;
}
extern "C" {
    #[link_name = "\u{1}_ZN10TMCStepper5cur_bEv"]
    pub fn TMCStepper_cur_b(this: *mut TMCStepper) -> i16;
}
impl TMCStepper {
    #[inline]
    pub unsafe fn cs2rms(&mut self, CS: u8) -> u16 {
        TMCStepper_cs2rms(self, CS)
    }
    #[inline]
    pub unsafe fn rms_current(&mut self, mA: u16) {
        TMCStepper_rms_current(self, mA)
    }
    #[inline]
    pub unsafe fn rms_current1(&mut self, mA: u16, mult: f32) {
        TMCStepper_rms_current1(self, mA, mult)
    }
    #[inline]
    pub unsafe fn rms_current2(&mut self) -> u16 {
        TMCStepper_rms_current2(self)
    }
    #[inline]
    pub unsafe fn test_connection(&mut self) -> u8 {
        TMCStepper_test_connection(self)
    }
    #[inline]
    pub unsafe fn microsteps(&mut self, ms: u16) {
        TMCStepper_microsteps(self, ms)
    }
    #[inline]
    pub unsafe fn microsteps1(&mut self) -> u16 {
        TMCStepper_microsteps1(self)
    }
    #[inline]
    pub unsafe fn blank_time(&mut self, value: u8) {
        TMCStepper_blank_time(self, value)
    }
    #[inline]
    pub unsafe fn blank_time1(&mut self) -> u8 {
        TMCStepper_blank_time1(self)
    }
    #[inline]
    pub unsafe fn hysteresis_end(&mut self, value: i8) {
        TMCStepper_hysteresis_end(self, value)
    }
    #[inline]
    pub unsafe fn hysteresis_end1(&mut self) -> i8 {
        TMCStepper_hysteresis_end1(self)
    }
    #[inline]
    pub unsafe fn hysteresis_start(&mut self, value: u8) {
        TMCStepper_hysteresis_start(self, value)
    }
    #[inline]
    pub unsafe fn hysteresis_start1(&mut self) -> u8 {
        TMCStepper_hysteresis_start1(self)
    }
    #[inline]
    pub unsafe fn GSTAT(&mut self, input: u8) {
        TMCStepper_GSTAT(self, input)
    }
    #[inline]
    pub unsafe fn GSTAT1(&mut self) -> u8 {
        TMCStepper_GSTAT1(self)
    }
    #[inline]
    pub unsafe fn reset(&mut self) -> bool {
        TMCStepper_reset(self)
    }
    #[inline]
    pub unsafe fn drv_err(&mut self) -> bool {
        TMCStepper_drv_err(self)
    }
    #[inline]
    pub unsafe fn uv_cp(&mut self) -> bool {
        TMCStepper_uv_cp(self)
    }
    #[inline]
    pub unsafe fn IHOLD_IRUN(&mut self, input: u32) {
        TMCStepper_IHOLD_IRUN(self, input)
    }
    #[inline]
    pub unsafe fn IHOLD_IRUN1(&mut self) -> u32 {
        TMCStepper_IHOLD_IRUN1(self)
    }
    #[inline]
    pub unsafe fn ihold(&mut self, B: u8) {
        TMCStepper_ihold(self, B)
    }
    #[inline]
    pub unsafe fn irun(&mut self, B: u8) {
        TMCStepper_irun(self, B)
    }
    #[inline]
    pub unsafe fn iholddelay(&mut self, B: u8) {
        TMCStepper_iholddelay(self, B)
    }
    #[inline]
    pub unsafe fn ihold1(&mut self) -> u8 {
        TMCStepper_ihold1(self)
    }
    #[inline]
    pub unsafe fn irun1(&mut self) -> u8 {
        TMCStepper_irun1(self)
    }
    #[inline]
    pub unsafe fn iholddelay1(&mut self) -> u8 {
        TMCStepper_iholddelay1(self)
    }
    #[inline]
    pub unsafe fn TPOWERDOWN(&mut self) -> u8 {
        TMCStepper_TPOWERDOWN(self)
    }
    #[inline]
    pub unsafe fn TPOWERDOWN1(&mut self, input: u8) {
        TMCStepper_TPOWERDOWN1(self, input)
    }
    #[inline]
    pub unsafe fn TSTEP(&mut self) -> u32 {
        TMCStepper_TSTEP(self)
    }
    #[inline]
    pub unsafe fn TPWMTHRS(&mut self) -> u32 {
        TMCStepper_TPWMTHRS(self)
    }
    #[inline]
    pub unsafe fn TPWMTHRS1(&mut self, input: u32) {
        TMCStepper_TPWMTHRS1(self, input)
    }
    #[inline]
    pub unsafe fn MSCNT(&mut self) -> u16 {
        TMCStepper_MSCNT(self)
    }
    #[inline]
    pub unsafe fn MSCURACT(&mut self) -> u32 {
        TMCStepper_MSCURACT(self)
    }
    #[inline]
    pub unsafe fn cur_a(&mut self) -> i16 {
        TMCStepper_cur_a(self)
    }
    #[inline]
    pub unsafe fn cur_b(&mut self) -> i16 {
        TMCStepper_cur_b(self)
    }
}
